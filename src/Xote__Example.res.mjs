// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Xote__Signal from "./Xote__Signal.res.mjs";
import * as Xote__Computed from "./Xote__Computed.res.mjs";
import * as Xote__Component from "./Xote__Component.res.mjs";

var todos = Xote__Signal.make([]);

var nextId = {
  contents: 0
};

var inputValue = Xote__Signal.make("");

var completedCount = Xote__Computed.make(function () {
      return Xote__Signal.get(todos).filter(function (todo) {
                  return todo.completed;
                }).length;
    });

var activeCount = Xote__Computed.make(function () {
      return Xote__Signal.get(todos).filter(function (todo) {
                  return !todo.completed;
                }).length;
    });

var totalCount = Xote__Computed.make(function () {
      return Xote__Signal.get(todos).length;
    });

function addTodo(text) {
  if (text.trim() !== "") {
    Xote__Signal.update(todos, (function (list) {
            return list.concat([{
                          id: nextId.contents,
                          text: text,
                          completed: false
                        }]);
          }));
    nextId.contents = nextId.contents + 1 | 0;
    return ;
  }
  
}

function toggleTodo(id) {
  Xote__Signal.update(todos, (function (list) {
          return list.map(function (todo) {
                      if (todo.id === id) {
                        return {
                                id: todo.id,
                                text: todo.text,
                                completed: !todo.completed
                              };
                      } else {
                        return todo;
                      }
                    });
        }));
}

function clearInput() {
  var input = document.querySelector(".todo-input");
  if (!(input == null)) {
    input.value = "";
    return ;
  }
  
}

function handleInput(evt) {
  var newValue = evt.target.value;
  Xote__Signal.set(inputValue, newValue);
}

function handleKeyDown(evt) {
  if (evt.key === "Enter") {
    addTodo(Xote__Signal.get(inputValue));
    return clearInput();
  }
  
}

function handleAddClick(_evt) {
  addTodo(Xote__Signal.get(inputValue));
  clearInput();
}

function todoItem(todo) {
  var checkboxAttrs = todo.completed ? [
      [
        "type",
        "checkbox"
      ],
      [
        "checked",
        "checked"
      ]
    ] : [[
        "type",
        "checkbox"
      ]];
  return Xote__Component.li([[
                "class",
                todo.completed ? "completed" : ""
              ]], undefined, [
              Xote__Component.input(checkboxAttrs, [[
                      "change",
                      (function (param) {
                          toggleTodo(todo.id);
                        })
                    ]], undefined),
              Xote__Component.span(undefined, undefined, [Xote__Component.text(todo.text)], undefined)
            ], undefined);
}

var inputElement = Xote__Component.input([
      [
        "type",
        "text"
      ],
      [
        "placeholder",
        "What needs to be done?"
      ],
      [
        "class",
        "todo-input"
      ]
    ], [
      [
        "input",
        handleInput
      ],
      [
        "keydown",
        handleKeyDown
      ]
    ], undefined);

var app = Xote__Component.div([[
        "class",
        "todo-app"
      ]], undefined, [
      Xote__Component.h1(undefined, undefined, [Xote__Component.text("Todo List")], undefined),
      Xote__Component.div([[
              "class",
              "todo-input-container"
            ]], undefined, [
            inputElement,
            Xote__Component.button([[
                    "class",
                    "add-button"
                  ]], [[
                    "click",
                    handleAddClick
                  ]], [Xote__Component.text("Add")], undefined)
          ], undefined),
      Xote__Component.ul([[
              "class",
              "todo-list"
            ]], undefined, [Xote__Component.list(todos, todoItem)], undefined)
    ], undefined);

Xote__Component.mountById(app, "app");

export {
  todos ,
  nextId ,
  inputValue ,
  completedCount ,
  activeCount ,
  totalCount ,
  addTodo ,
  toggleTodo ,
  clearInput ,
  handleInput ,
  handleKeyDown ,
  handleAddClick ,
  todoItem ,
  inputElement ,
  app ,
}
/* todos Not a pure module */
