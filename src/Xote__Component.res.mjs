// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Xote__Effect from "./Xote__Effect.res.mjs";
import * as Xote__Signal from "./Xote__Signal.res.mjs";
import * as Xote__Computed from "./Xote__Computed.res.mjs";

function text(content) {
  return {
          TAG: "Text",
          _0: content
        };
}

function textSignal(signal) {
  return {
          TAG: "SignalText",
          _0: signal
        };
}

function fragment(children) {
  return {
          TAG: "Fragment",
          _0: children
        };
}

function signalFragment(signal) {
  return {
          TAG: "SignalFragment",
          _0: signal
        };
}

function list(signal, renderItem) {
  var nodesSignal = Xote__Computed.make(function () {
        return Xote__Signal.get(signal).map(renderItem);
      });
  return {
          TAG: "SignalFragment",
          _0: nodesSignal
        };
}

function element(tag, attrsOpt, eventsOpt, childrenOpt, param) {
  var attrs = attrsOpt !== undefined ? attrsOpt : [].map(function (x) {
          return x;
        });
  var events = eventsOpt !== undefined ? eventsOpt : [].map(function (x) {
          return x;
        });
  var children = childrenOpt !== undefined ? childrenOpt : [].map(function (x) {
          return x;
        });
  return {
          TAG: "Element",
          tag: tag,
          attrs: attrs,
          events: events,
          children: children
        };
}

function div(attrs, events, children, param) {
  return element("div", attrs, events, children, undefined);
}

function span(attrs, events, children, param) {
  return element("span", attrs, events, children, undefined);
}

function button(attrs, events, children, param) {
  return element("button", attrs, events, children, undefined);
}

function input(attrs, events, param) {
  return element("input", attrs, events, undefined, undefined);
}

function h1(attrs, events, children, param) {
  return element("h1", attrs, events, children, undefined);
}

function h2(attrs, events, children, param) {
  return element("h2", attrs, events, children, undefined);
}

function h3(attrs, events, children, param) {
  return element("h3", attrs, events, children, undefined);
}

function p(attrs, events, children, param) {
  return element("p", attrs, events, children, undefined);
}

function ul(attrs, events, children, param) {
  return element("ul", attrs, events, children, undefined);
}

function li(attrs, events, children, param) {
  return element("li", attrs, events, children, undefined);
}

function render(node) {
  switch (node.TAG) {
    case "Element" :
        var el = document.createElement(node.tag);
        node.attrs.forEach(function (param) {
              el.setAttribute(param[0], param[1]);
            });
        node.events.forEach(function (param) {
              el.addEventListener(param[0], param[1]);
            });
        node.children.forEach(function (child) {
              var childEl = render(child);
              el.appendChild(childEl);
            });
        return el;
    case "Text" :
        return document.createTextNode(node._0);
    case "SignalText" :
        var signal = node._0;
        var el$1 = document.createTextNode(Xote__Signal.peek(signal));
        Xote__Effect.run(function () {
              var content = Xote__Signal.get(signal);
              el$1.textContent = content;
            });
        return el$1;
    case "Fragment" :
        var fragment = document.createDocumentFragment();
        node._0.forEach(function (child) {
              var childEl = render(child);
              fragment.appendChild(childEl);
            });
        return fragment;
    case "SignalFragment" :
        var signal$1 = node._0;
        var container = document.createElement("div");
        container.setAttribute("data-signal-fragment", "true");
        container.setAttribute("style", "display: contents");
        Xote__Effect.run(function () {
              var children = Xote__Signal.get(signal$1);
              ((container.innerHTML = ''));
              children.forEach(function (child) {
                    var childEl = render(child);
                    container.appendChild(childEl);
                  });
            });
        return container;
    
  }
}

function mount(node, container) {
  var el = render(node);
  container.appendChild(el);
}

function mountById(node, containerId) {
  var container = document.getElementById(containerId);
  if (container == null) {
    console.error("Container element not found: " + containerId);
    return ;
  } else {
    return mount(node, container);
  }
}

var Signal;

var Effect;

var Core;

var Computed;

export {
  Signal ,
  Effect ,
  Core ,
  Computed ,
  text ,
  textSignal ,
  fragment ,
  signalFragment ,
  list ,
  element ,
  div ,
  span ,
  button ,
  input ,
  h1 ,
  h2 ,
  h3 ,
  p ,
  ul ,
  li ,
  render ,
  mount ,
  mountById ,
}
/* No side effect */
